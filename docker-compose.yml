services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: root
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d db"]
      interval: 10s
      timeout: 5s
      retries: 5
  # fastapi:
  #   build: ./fastapi
  #   container_name: fastapi
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     DATABASE_URL: postgresql://user:root@postgres:5432/db
  #     PROMETHEUS_MULTIPROC_DIR: /tmp
  #   volumes:
  #     - ./fastapi:/app
  #   depends_on:
  #     - postgres
  #   networks:
  #     - monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
    depends_on:
      - postgres
      - prometheus
    #  - fastapi
  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgresql-exporter
    ports:
        - "9187:9187"
    environment:
        DATA_SOURCE_NAME: "postgres://user:root@postgres:5432/db?sslmode=disable"
    depends_on:
      prometheus:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
        - monitoring

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
networks:
  monitoring:
    driver: bridge

